package ccsp.view;

import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.EtchedBorder;

import ccsp.models.CrimeRecordVO;
import ccsp.models.CrimeSysDAO;

public class UpdatePanel extends JPanel implements ActionListener, ItemListener {

	private JPanel jp[] = new JPanel[8];
	private JPanel keyP = new JPanel();
	private JLabel jl[] = new JLabel[7];
	private JLabel keyL = new JLabel();
	private JLabel arrowL = new JLabel();
	private JTextField tf[] = new JTextField[7];
	private JTextField keyF = new JTextField();
	private JTextField answerF[] = new JTextField[4];
	private JButton search;
	private JButton update;
	private JButton reset;
	JComboBox rcombo = new JComboBox();
	JComboBox scombo = new JComboBox();
	JComboBox ctgycombo = new JComboBox();
	JComboBox crcombo = new JComboBox();
	JComboBox[] comboBoxes = { rcombo, scombo, ctgycombo, crcombo };
	
	//項目の名前
	String[] caption = { "犯罪分類 : ", "地域 : ", "性別 : ", "前科 : ", "名前 : ", "住民登録番号 : ",
			"発生日 : " };
	
	//データ修正タブのビュー
	public UpdatePanel() {
		setLayout(new GridLayout(10, 1));
		EtchedBorder eb = new EtchedBorder();
		setBorder(eb);
		ArrayList<String> regionDataList = new ArrayList<String>();
		ArrayList<String> sexDataList = new ArrayList<String>();
		ArrayList<String> categoryDataList = new ArrayList<String>();
		ArrayList<String> cRecordDataList = new ArrayList<String>();
		CrimeSysDAO crDAO = new CrimeSysDAO();

		int size = caption.length;

		keyL = new JLabel("犯罪番号 : ");
		keyF = new JTextField(10);
		keyP = new JPanel();
		keyP.add(keyL);
		keyP.add(keyF);
		search = new JButton("検索");
		search.addActionListener(this);
		keyP.add(search);
		add(keyP);
		keyF.setEditable(true);

		for (int i = 0; i <= 3; i++) {
			jl[i] = new JLabel(caption[i]);
			tf[i] = new JTextField(10);
			arrowL = new JLabel(" → ");
			jp[i] = new JPanel();
			jp[i].add(jl[i]);
			jp[i].add(tf[i]);
			jp[i].add(arrowL);
			jp[i].add(comboBoxes[i]);
			add(jp[i]);
			tf[i].setEditable(false);
		}
		for (int i = 4; i < size; i++) {
			jl[i] = new JLabel(caption[i]);
			tf[i] = new JTextField(10);
			arrowL = new JLabel(" → ");
			answerF[i - 4] = new JTextField(12);
			jp[i] = new JPanel();
			jp[i].add(jl[i]);
			jp[i].add(tf[i]);
			jp[i].add(arrowL);
			jp[i].add(answerF[i - 4]);
			add(jp[i]);
			tf[i].setEditable(false);
			answerF[i - 4].setEditable(true);
		}

		ctgycombo.addItem("番号を選択してください");
		categoryDataList = crDAO.getCrimeCategoryTableData();
		addCbboxItem(ctgycombo, categoryDataList);
		jp[0].add(ctgycombo);
		ctgycombo.addActionListener(this);
		ctgycombo.addItemListener(this);

		rcombo.addItem("地域を選択してください");
		regionDataList = crDAO.getCrimeRegionTableData();
		addCbboxItem(rcombo, regionDataList);
		jp[1].add(rcombo);
		rcombo.addActionListener(this);
		rcombo.addItemListener(this);

		scombo.addItem("性別を選択してください");
		sexDataList = crDAO.getCrimeSexTableData();
		addCbboxItem(scombo, sexDataList);
		jp[2].add(scombo);
		scombo.addActionListener(this);
		scombo.addItemListener(this);

		crcombo.addItem("前科の有無を選択してください");
		cRecordDataList = crDAO.getCRecordTableData();
		addCbboxItem(crcombo, cRecordDataList);
		jp[3].add(crcombo);
		crcombo.addActionListener(this);
		crcombo.addItemListener(this);

		jp[size] = new JPanel();
		update = new JButton("修正");
		update.addActionListener(this);
		reset = new JButton("リセット");
		reset.addActionListener(this);
		jp[size].add(update);
		jp[size].add(reset);
		add(jp[size]);

	}

	public void addCbboxItem(JComboBox cbbox, ArrayList<String> list) {
		for (int i = 1; i <= list.size(); i++) {
			cbbox.addItem(i + ". " + list.get(i - 1));
		}

	}

	@Override
	public void itemStateChanged(ItemEvent ie) {

	}
	
	//データ修正タブの処理詳細
	@Override
	public void actionPerformed(ActionEvent ae) {
		String ae_type = ae.getActionCommand();
		CrimeRecordVO crVO = null;
		CrimeSysDAO crDAO = null;
		int crimNo = 0;
		int regitNumInput = 0;
		
		//検索ボタンのイヴェント処理
		if (ae_type.equals(search.getText())) {
			try {
				crDAO = new CrimeSysDAO();
				String sno = keyF.getText().trim();
				
				//犯罪番号に数値が記入されている場合、犯罪者のデータを持ち込む
				if (!sno.equals("")) {
					int no = Integer.parseInt(sno);
					crVO = crDAO.getCriminalCheck(no);
				}
			} catch (Exception e) {
				System.out.println("e=[" + e + "e");
			}
			
			//犯罪者データの持ち込みに成功した場合、テキストフィールドにデータを表示
			if (crVO != null) {
				tf[0].setText(crVO.getCrimDivNo() + "");
				tf[1].setText(crVO.getRegion() + "");
				tf[2].setText(crVO.getSex() + "");
				tf[3].setText(crVO.getcRecord() + "");
				tf[4].setText(crVO.getName() + "");
				tf[5].setText(crVO.getRegitNumber() + "");
				tf[6].setText(crVO.getDate() + "");
				answerF[0].setText(crVO.getName() + "");
				answerF[1].setText(crVO.getRegitNumber() + "");
				answerF[2].setText(crVO.getDate() + "");
				
			//犯罪番号になにも記入しなかった場合、表示
			} else {
				JOptionPane.showMessageDialog(this, "検索失敗");
			}
			
		//修正ボタンのイヴェント処理
		} else if (ae_type.equals(update.getText())) {
			try {
				//チェックボックスやテキストフィールドに記入されたデータを貯蔵
				crimNo = Integer.parseInt(keyF.getText().trim());
				regitNumInput = Integer.parseInt(answerF[1].getText().trim());
				crVO = new CrimeRecordVO(crimNo, rcombo.getSelectedIndex(), scombo.getSelectedIndex(),
						crcombo.getSelectedIndex(), answerF[0].getText().trim(), regitNumInput,
						answerF[2].getText().trim(), ctgycombo.getSelectedIndex());
				crDAO = new CrimeSysDAO();
				//貯蔵したデータでアップデート
				crDAO.getCriminalUpdate(crVO);
			} catch (Exception e) {
				System.out.println("input error");
				System.out.println("e=[" + e + "]");
			}
			//入力に間違いがある場合、メッセージを表示。アップデートに成功したら、成功メッセージ表示
			if (crVO == null) {
				JOptionPane.showMessageDialog(this, "正しくありません" + "\n" + "入力内容をもう一度確認してください");
			} else {
				JOptionPane.showMessageDialog(this, "犯罪者 " + answerF[1].getText() + "の" + "\n" + "個人情報が修正されました!");
			}
		//リセットボタンのイヴェント処理。チェックボックスやテキストフィールドに記入されたデータをリセットする
		} else if (ae_type.equals(reset.getText())) {
			for (int i = 0; i < answerF.length; i++) {
				answerF[i].setText("");
			}
			for (int i = 0; i < comboBoxes.length; i++) {
				comboBoxes[i].setSelectedIndex(0);
			}
		}
	}

}
