※※※※※※※※※※ 웹 프로그램과 서블릿 ※※※※※※※※※※※



1. 웹 프로그램의 실행 순서
- public void init()  : 웹에서 멤버 필드의 값을 초기화한다. 사용자가 접속 시 제일 먼저 발생한다.
- public void service() : 웹에서 모든 사용자가 접속하고 있을 때 제일 먼저 실행되는 메소드이다. java의 main메소드와 같다
- public void destroy() : init메소드에 의해 초기화한 멤버의 필드값을 소멸시킨다. 서버 구동종료 시 실행하는 메소드이다.


2. 클라이언트의 요청형식
(1)HTTP메소드
- html문서의 form태그의 속성 method에 지정한다.
ex) <form method="post">
- 데이터의 요청방식에 따라 
GET, POST, HEAD, PUT, DELETE, OPTIONS, TRACE, CONNECT
로 나뉘어진다. → 주로 GET,POST를 사용하고, springframework에서는 put, delete도 사용한다.

(2)요청 URI
- 실제 서버로부터 전달받을 데이터가 있는 경로를 지정한다.

(3)HTTP 버젼
- http버젼을 지정한다.
- 요즘은 통상 HTTP1.1을 사용하므로, HTTP1/1로 표기한다.
ex) HTTP1/1\r\n

(4)헤더부
- 헤더의 키와 값을 서버로 보낼 수 있다.
- 형식은 헤더키 : 헤더값\r\n 과 같이 작성한다.
ex) Host : www.freelec.co.kr\r\n
    Connection : Close\r\n

(5)바디
- 구체적인 메세지를 작성할 수 있다.
ex) ID : yoonmh\r\n
    PW : test\r\n
- 헤더부나 바디 맨 아래줄에 \n을 필수로 작성한다. 마침표 기능 및 헤더부와 바디부를 구분하는 기준점이 된다.


3. 서버의 응답형식
- 서버의 응답형식은 대체로 클라이언트의 요청형식과 비슷하다.
- 다른점은 요청부에만 있다.
- 요청부
HTTP버전 응답코드 코드메시지
로 구성되어 있다.
ex) HTTP1/1(HTTP버전) 404(응답코드) Object Not Found\r\n(코드메세지)
- 요청에 따른 결과의 내용에 따라 숫자를 부여한 것이 응답코드이다.
- 400~499는 클라이언트의 요청이 형식에 맞지 않거나 인증되지 않을 때 응답코드이며, 주소가 잘못되었을 때 404가 뜬다.



※※※※※※※※※※ 서블릿에서 데이터 통신과 한글처리 ※※※※※※※※※※※



4. mapping 
(1)web.xml파일 설정 
- 프로젝트 생성 시 web.xml을 생성한다.
- 데이터를 수정해도 .java파일을 컴파일할 필요가 없음
- 여러개의 서블릿을 묶어놓고 관리하기 편하다.
- web.xml에는 웹 서버의 환경정보, 설정을 저장한다.

(2)annotation 설정
- 프로젝트 생성 시 web.xml을 생성하지 않는다.
- mapping 방식을 annotation방식을 지정한다.
- servlet파일을 만들면 @WebServlet에 annotation에 지정한 이름이 나온다.
ex) @WebServlet("/omg")


※※※※※※※※※※ 서블릿의 라이프 사이클과 주요 클래스들 ※※※※※※※※※※※


5. get방식과 post방식
- form태그의 method 속성을 post로 설정하면 post방식으로 요청한다. 그 이외의 방식은 모두 get방식 요청,
- 주소표시줄에 직접 요청하는 경우
ex) http://localhost:8081/JSPandServlet_exr/ServletGetParameter?data1=aaa&data2=bbb&data3=ccc
- 웹페이지에서 링크를 클릭한 경우
ex) 위와 같은 주소로 만들어진 링크를 html파일에 만들어서 그 링크를 클릭하면 동일하게 동작한다.
- javascript의 window.open방식에 의한 요청, 자바스크립트 form태그의 method에 "get"을 설정하여 요청하는 것 모두 get방식 
- get방식과 post방식으로 전달한 파라미터는 한글이 깨진다. 열혈강의 서블렛 jsp웹 프로그래밍 509페이지를 참조하면 개발자가 직접 인코딩을 할 수 있다.
ex) String name = request.getParameter("name");
    name = new String(name.getBytes("ISO8859_1"), "euc-kr");
- post방식은 메세지 바디에 모든 데이터가 담겨 전송되기 때문에 간단히 언어처리를 할 수 있다.
ex) request.setCharacterEncoding("euc-kr");
- 위와 같이 하면 인코딩을 할 수 있다.

6. Post요청 방식의 예제
- form태그의 method에는 get, post방식을 지정한다
- action에는 서버의 주소를 지정한다.
 → 현재 환경에서는 apache tomcat을 사용하므로, 프로젝트 생성 시 만든  web.xml에 servlet-mapping의 url-pattern에 그 주소를 설정하고 있다.  
- 클라이언트의 요청에 담긴 데이터를 가져오는 메소드가 getParameter()이다.
 → 괄호 안에 있는 변수의 형식대로 가져옴
- getParameter()의 반환형은 String 형이다. 
 → 한계가 있음
- 객체를 그대로 전달할 수 있는 방법이 필요하다.

7. 응답
- 응답은 setContentType()메소드로 인코딩을 한다.
ex) response.setContentType("text/html;charset=utf-8");
- 해당 메소드의 인자는 mime방식으로 넣는다.
※mime방식 : 파일의 종류/파일포맷 으로 쓴다.
ex) text/html

8. 서블릿 프로그램
- web.xml에 저장된 정보를 가져오기 위해 아래와같이 쓴다.
ex) ServletConfig config = this.getServletConfig();

9. 헤더의 출력
- 클라이언트가 요청하면서 보내온 헤더값은 확인만 가능
- 서버가 응답하면서 보내는 헤더의 값은 변경가능
- 실무 상 헤더의 값을 변경할 일은 없다.



※※※※※※※※※※ 서블릿 API ※※※※※※※※※※※



10. 에러처리와 url이동
- sendError() : printStackTrace()와 같이 에러 메세지를 출력한다.
- 메세지를 출력하는 것 이외에 의미가 없기 때문에 실무에서는 사용하지 않는다.
- sendRedirect() : 오류가 발생했을 때, 이전페이지 또는 다른 페이지로 이동한다.
- redirect : 이동. 데이터를 가지지 않고 이동만 한다.
ex) 회원가입 이후 가입 성공페이지 띄울때
- forward : 전달, redirect의 반대되는 개념. 데이터를 전달한다.
ex) 메일 송신할 때

11. sendRedirect()
- response.sendRedirect("이동할 페이지");
- 위와 같이하면, 응답을 할 때 해당 페이지로 이동이 가능하다.

12. requestDispatcher()
- forward()를 하기위한 인터페이스
- getServletContext()로 내용을 담아온 뒤,
- getRequestDispatcher("url")로 링크를 설정하고
- forward(request, response)로 자료를 넘긴다.

13. include() 
- forward와 사용방식이 똑같다
- forward와 다른 점은 응답할 내용을 include()로 포함시키면, 그 정보가 누적되어 페이지에 해당 내용들을 모두 포함해서 보여준다.



※※※※※※※※※※ 데이터의 저장영역 ※※※※※※※※※※※

1. 저장영역의 종류 : 페이지 객체, 요청 객체, 세션 객체, ServletContext(application) 객체
- 저장영역을 사용하는 이유 : getParameter()는 String형, 즉, 문자열이기 때문에, 데이터 처리가 까다롭다.
- 저장영역을 사용하면, 객체 단위로 데이터를 처리할 수 있다.
 → 저장영역 객체에 데이터를 집어넣어서 그 객체를 주고 받는 식

2. 데이터 처리
- 객체 : 각 객체
- 추가 : request.setAttribute("키", 값)
- 생성 : session = request.getSession()
- 삭제 : session.removeAttribute("키", 값)
- 획득 : Object obj = session.getAttribute("키")
- 생성을 제외한 모든 영역이 같은 메소드를 사용한다.

3. 쿠키 데이터
- 클라이언트의 컴퓨터에 파일로 저장되는 데이터
- 로그인 정보를 저장하는 등의 처리에서 활용함.
 → 로그인 한뒤 창을 끄고, 다음에 창을 열었을 때 id, pw가 텍스트 필드에 기재되어 있다.

※※※※※※※※※※ 서블릿에서의 파일 입출력과 전송, JDBC ※※※※※※※※※※※

